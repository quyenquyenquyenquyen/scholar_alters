{"title": "On-the-fly Generation-Quality Enhancement of Deep Code Models via Model Collaboration", "first_label": ["Code"], "second_label": ["Generation"], "data": "W Sun, N Huang, M Yan, Z Liu, H Li, Y Lei, D Lo- ACM Transactions on Software, 2025\nThe growing prominence of deep code models in automating software engineering \ntasks is undeniable. However, their deployment encounters significant challenges in \non-the-fly performance enhancement, which refers to dynamically improving the", "link": "https://scholar.google.com/scholar_url?url=https://dl.acm.org/doi/pdf/10.1145/3765752&hl=vi&sa=X&d=8461622238338289043&ei=RqO-aIDFEPfP6rQP2-GA-Qo&scisig=AAZF9b8XRChF1VQRgFEY-oK3km8Q&oi=scholaralrt&hist=70gU4M0AAAAJ:5337116523931328826:AAZF9b-46FvMQTpOKclK0XMbpLrW&html=&pos=0&folt=rel", "author": ["Thanh Le-Cong"], "ref": ["Thanh Le-Cong - nghi\u00ean c\u1ee9u li\u00ean quan m\u1edbi"]}
{"title": "GTVD: a multi-level aggregation vulnerability detection method based on full-dependency program graph", "first_label": ["Vulnerabilities"], "second_label": ["Detection", "Graph"], "data": "H He, S Li, Y Li, Y Li- Cluster Computing, 2025\nIn modern software development life cycles, proactive vulnerability discovery and \nremediation play crucial roles in ensuring application security. However, current \ndeep learning-based vulnerability detection methods frequently face limitations due", "link": "https://scholar.google.com/scholar_url?url=https://link.springer.com/article/10.1007/s10586-025-05506-7&hl=vi&sa=X&d=9365356712912853263&ei=RqO-aIDFEPfP6rQP2-GA-Qo&scisig=AAZF9b_DdZ4fyL1mLj90wo4wpBRq&oi=scholaralrt&hist=70gU4M0AAAAJ:5337116523931328826:AAZF9b-46FvMQTpOKclK0XMbpLrW&html=&pos=1&folt=rel", "author": ["Thanh Le-Cong"], "ref": ["Thanh Le-Cong - nghi\u00ean c\u1ee9u li\u00ean quan m\u1edbi"]}
{"title": "Syntactic multilingual probing of pre-trained language models of code", "first_label": ["LLM", "Code"], "second_label": [], "data": "JAH Lpez, M Weyssow, JS Cuadrado, H Sahraoui- Journal of Systems and, 2026\nPre-trained language models (PLMs) have demonstrated remarkable abilities in \ncoding tasks, establishing themselves as a state-of-the-art technique in machine \nlearning for code. However, due to their deep neural network-based structure, PLMs", "link": "https://scholar.google.com/scholar_url?url=https://www.sciencedirect.com/science/article/pii/S0164121225002730&hl=vi&sa=X&d=912414639058686127&ei=RqO-aIDFEPfP6rQP2-GA-Qo&scisig=AAZF9b_JpbZnEYTzTsY6dFTnCppp&oi=scholaralrt&hist=70gU4M0AAAAJ:5337116523931328826:AAZF9b-46FvMQTpOKclK0XMbpLrW&html=&pos=2&folt=rel", "author": ["Thanh Le-Cong"], "ref": ["Thanh Le-Cong - nghi\u00ean c\u1ee9u li\u00ean quan m\u1edbi"]}
{"title": "From Cryptic to Clear-Training on LLM Explanations to Detect Smart Contract Vulnerabilities", "first_label": ["Vulnerabilities", "Smart Contracts", "LLM"], "second_label": [], "data": "Y Chen, Z Sun, G Wang, Q Liang, X Yu, D Hao- ACM Transactions on Software, 2025\nSmart contracts have revolutionized the way transactions are executed, offering \ndecentralized and immutable frameworks. The immutability of smart contracts poses \nsignificant risks when vulnerabilities exist in their code, leading to financial losses\n\u00a0\nGoogle Scholar gi thng bo ny cho bn v bn ang theo di nhng bi vit mi lin quan n nghin cu ca \nThanh Le-Cong\n.\nLit k cnh bo\nHy thng bo", "link": "https://scholar.google.com/scholar_url?url=https://dl.acm.org/doi/pdf/10.1145/3765753&hl=vi&sa=X&d=10696251976758637118&ei=RqO-aIDFEPfP6rQP2-GA-Qo&scisig=AAZF9b9ZBf4NQYTpgMU9yATSPdqf&oi=scholaralrt&hist=70gU4M0AAAAJ:5337116523931328826:AAZF9b-46FvMQTpOKclK0XMbpLrW&html=&pos=3&folt=rel", "author": ["Thanh Le-Cong"], "ref": ["Thanh Le-Cong - nghi\u00ean c\u1ee9u li\u00ean quan m\u1edbi"]}
{"title": "Human-Written vs. AI-Generated Code: A Large-Scale Study of Defects, Vulnerabilities, and Complexity", "first_label": ["Vulnerabilities", "Code", "Software Defect"], "second_label": [], "data": "D Cotroneo, C Improta, P Liguori- arXiv preprint arXiv:2508.21634, 2025\nAs AI code assistants become increasingly integrated into software development \nworkflows, understanding how their code compares to human-written programs is \ncritical for ensuring reliability, maintainability, and security. In this paper, we present \na large-scale comparison of code authored by human developers and three state-of-\nthe-art LLMs, ie, ChatGPT, DeepSeek-Coder, and Qwen-Coder, on multiple \ndimensions of software quality: code defects, security vulnerabilities, and structural\nTrch dn: Refining chatgpt-generated code: Characterizing and mitigating", "link": "https://scholar.google.com/scholar_url?url=https://arxiv.org/pdf/2508.21634&hl=vi&sa=X&d=8477581447837533475&ei=o_K8aKqzMefYieoP5s7t2Qo&scisig=AAZF9b-M9zrl_2Ouj3ipW3Ds0IQb&oi=scholaralrt&hist=70gU4M0AAAAJ:6246953642887790424:AAZF9b-KfaIzNELg_AxYHyYLV6lH&html=&pos=0&folt=cit", "author": ["Thanh Le-Cong"], "ref": ["2 l\u1eddi tr\u00edch d\u1eabn m\u1edbi \u0111\u1ebfn b\u00e0i vi\u1ebft c\u1ee7a Thanh Le-Cong"]}
{"title": "Avaliao comparativa do desempenho de inteligncias artificiais generativas e ferramentas tradicionais na anlise de cdigo-fonte JavaScript", "first_label": [], "second_label": [], "data": "R Pimentel, CB Progetti- Simpsio Brasileiro de Segurana da Informao e de, 2025\nEstudo comparativo entre ferramentas SAST (Semgrep/SonarQube) e modelos LLM \n(DeepSeek/CodeLlama) na deteco de vulnerabilidades em JavaScript (OWASP \nJuice Shop). Resultados revelam complementaridade: SASTs alcanam 100% de \npreciso para vulnerabilidades padro (XSS/SQLi), enquanto LLMs oferecem maior \nrecall (70% no DeepSeek) para ameaas contextuais (NoSQLi/Broken Access \nControl). A taxa de 22-45% de falsos positivos em LLMs demanda estratgias de\nTrch dn: Comparison of static application security testing tools and large\u00a0\u00a0\n\u00a0\nGoogle Scholar gi thng bo ny cho bn v bn ang theo di nhng li trch dn mi trong cc bi vit ca \nThanh Le-Cong\n.\nLit k cnh bo\nHy thng bo", "link": "https://scholar.google.com/scholar_url?url=https://sol.sbc.org.br/index.php/sbseg_estendido/article/download/36756/36542/&hl=vi&sa=X&d=11971438696651862258&ei=o_K8aKqzMefYieoP5s7t2Qo&scisig=AAZF9b8NSgOQNe0ibg7Gi2jABLp4&oi=scholaralrt&hist=70gU4M0AAAAJ:6246953642887790424:AAZF9b-KfaIzNELg_AxYHyYLV6lH&html=&pos=1&folt=cit", "author": ["Thanh Le-Cong"], "ref": ["2 l\u1eddi tr\u00edch d\u1eabn m\u1edbi \u0111\u1ebfn b\u00e0i vi\u1ebft c\u1ee7a Thanh Le-Cong"]}
{"title": "Automated Repair of C Programs Using Large Language Models", "first_label": ["APR", "LLM"], "second_label": ["Repair"], "data": "M Farzandway, F Ghassemi- arXiv preprint arXiv:2509.01947, 2025\nThis study explores the potential of Large Language Models (LLMs) in automating \nthe repair of C programs. We present a framework that integrates spectrum-based \nfault localization (SBFL), runtime feedback, and Chain-of-Thought-structured", "link": "https://scholar.google.com/scholar_url?url=https://arxiv.org/pdf/2509.01947&hl=vi&sa=X&d=1317846922093490120&ei=o_K8aJjVJffP6rQP2-GA-Qo&scisig=AAZF9b9xJ1n4DpSkY2MDDEUWo_Wk&oi=scholaralrt&hist=70gU4M0AAAAJ:5337116523931328826:AAZF9b-46FvMQTpOKclK0XMbpLrW&html=&pos=0&folt=rel", "author": ["Thanh Le-Cong"], "ref": ["Thanh Le-Cong - nghi\u00ean c\u1ee9u li\u00ean quan m\u1edbi"]}
{"title": "An Empirical Study of Vulnerable Package Dependencies in LLM Repositories", "first_label": ["LLM"], "second_label": [], "data": "S Liu, X Hu, X Xia, D Lo, X Yang- arXiv preprint arXiv:2508.21417, 2025\nLarge language models (LLMs) have developed rapidly in recent years, \nrevolutionizing various fields. Despite their widespread success, LLMs heavily rely \non external code dependencies from package management systems, creating a", "link": "https://scholar.google.com/scholar_url?url=https://arxiv.org/pdf/2508.21417&hl=vi&sa=X&d=14553577615445056080&ei=o_K8aJjVJffP6rQP2-GA-Qo&scisig=AAZF9b9j862ZVwGt7jgVb2PyU_Ih&oi=scholaralrt&hist=70gU4M0AAAAJ:5337116523931328826:AAZF9b-46FvMQTpOKclK0XMbpLrW&html=&pos=1&folt=rel", "author": ["Thanh Le-Cong"], "ref": ["Thanh Le-Cong - nghi\u00ean c\u1ee9u li\u00ean quan m\u1edbi"]}
{"title": "Benchmarking and Studying the LLM-based Code Review", "first_label": ["LLM", "Code Review", "Code"], "second_label": [], "data": "Z Zeng, R Shi, K Han, Y Li, K Sun, Y Wang, Z Yu, R Xie- arXiv preprint arXiv, 2025\nAutomated Code Review (ACR) is crucial for software quality, yet existing \nbenchmarks often fail to reflect real-world complexities, hindering the evaluation of \nmodern Large Language Models (LLMs). Current benchmarks frequently focus on", "link": "https://scholar.google.com/scholar_url?url=https://arxiv.org/pdf/2509.01494&hl=vi&sa=X&d=9924101107475937857&ei=o_K8aJjVJffP6rQP2-GA-Qo&scisig=AAZF9b9CW-Ez1-ukRHGu-p7F6_IT&oi=scholaralrt&hist=70gU4M0AAAAJ:5337116523931328826:AAZF9b-46FvMQTpOKclK0XMbpLrW&html=&pos=2&folt=rel", "author": ["Thanh Le-Cong"], "ref": ["Thanh Le-Cong - nghi\u00ean c\u1ee9u li\u00ean quan m\u1edbi"]}
{"title": "ChopChop: a Programmable Framework for Semantically Constraining the Output of Language Models", "first_label": ["LLM"], "second_label": [], "data": "S Nagy, T Zhou, N Polikarpova, L D'Antoni- arXiv preprint arXiv:2509.00360, 2025\nLanguage models (LMs) can generate code, but cannot guarantee its correctness--\nproducing outputs that often violate type safety, program invariants, or semantic \nequivalence. Constrained decoding offers a solution by restricting generation to", "link": "https://scholar.google.com/scholar_url?url=https://arxiv.org/pdf/2509.00360&hl=vi&sa=X&d=15761961036894749958&ei=o_K8aJjVJffP6rQP2-GA-Qo&scisig=AAZF9b9gFg_U0FktMXuQ5DX2sTxT&oi=scholaralrt&hist=70gU4M0AAAAJ:5337116523931328826:AAZF9b-46FvMQTpOKclK0XMbpLrW&html=&pos=3&folt=rel", "author": ["Thanh Le-Cong"], "ref": ["Thanh Le-Cong - nghi\u00ean c\u1ee9u li\u00ean quan m\u1edbi"]}
{"title": "LLM-Based Program Generation for Triggering Numerical Inconsistencies Across Compilers", "first_label": ["LLM"], "second_label": ["Generation"], "data": "Y Wang, C Rubio-Gonzlez- arXiv preprint arXiv:2509.00256, 2025\nFloating-point inconsistencies across compilers can undermine the reliability of \nnumerical software. We present LLM4FP, the first framework that uses Large \nLanguage Models (LLMs) to generate floating-point programs specifically designed", "link": "https://scholar.google.com/scholar_url?url=https://arxiv.org/pdf/2509.00256&hl=vi&sa=X&d=6362971429469914313&ei=o_K8aJjVJffP6rQP2-GA-Qo&scisig=AAZF9b_4FT9ZnZeCMwHPUqYhSw9g&oi=scholaralrt&hist=70gU4M0AAAAJ:5337116523931328826:AAZF9b-46FvMQTpOKclK0XMbpLrW&html=&pos=4&folt=rel", "author": ["Thanh Le-Cong"], "ref": ["Thanh Le-Cong - nghi\u00ean c\u1ee9u li\u00ean quan m\u1edbi"]}
{"title": "Token Sugar: Making Source Code Sweeter for LLMs through Token-Efficient Shorthand", "first_label": ["LLM", "Code"], "second_label": [], "data": "Z Sun, C Yang, X Du, Z Yang, L Li, D Lo\nLarge language models (LLMs) have shown exceptional performance in code \ngeneration and understanding tasks, yet their high computational costs hinder \nbroader adoption. One important factor is the inherent verbosity of programming\n\u00a0\nGoogle Scholar gi thng bo ny cho bn v bn ang theo di nhng bi vit mi lin quan n nghin cu ca \nThanh Le-Cong\n.\nLit k cnh bo\nHy thng bo", "link": "https://scholar.google.com/scholar_url?url=https://v587su.github.io/papers/SugarPaper.pdf&hl=vi&sa=X&d=10071555566761971863&ei=o_K8aJjVJffP6rQP2-GA-Qo&scisig=AAZF9b_FQtP2qw0czwy-pXoKQTUa&oi=scholaralrt&hist=70gU4M0AAAAJ:5337116523931328826:AAZF9b-46FvMQTpOKclK0XMbpLrW&html=&pos=5&folt=rel", "author": ["Thanh Le-Cong"], "ref": ["Thanh Le-Cong - nghi\u00ean c\u1ee9u li\u00ean quan m\u1edbi"]}
